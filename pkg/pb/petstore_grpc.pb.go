// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: petstore.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PetstoreClient is the client API for Petstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetstoreClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*ApiResponse, error)
	UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddPet(ctx context.Context, in *AddPetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindPetsByStatus(ctx context.Context, in *FindPetsByStatusRequest, opts ...grpc.CallOption) (*Pet, error)
	FindPetsByTags(ctx context.Context, in *FindPetsByTagsRequest, opts ...grpc.CallOption) (*Pet, error)
	GetPetById(ctx context.Context, in *GetPetByIdRequest, opts ...grpc.CallOption) (*Pet, error)
	UpdatePetWithForm(ctx context.Context, in *UpdatePetWithFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*Order, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*Order, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetInventory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInventoryOK, error)
	CreateUsersWithArrayInput(ctx context.Context, in *CreateUsersWithArrayInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateUsersWithListInput(ctx context.Context, in *CreateUsersWithListInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type petstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewPetstoreClient(cc grpc.ClientConnInterface) PetstoreClient {
	return &petstoreClient{cc}
}

func (c *petstoreClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*ApiResponse, error) {
	out := new(ApiResponse)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/UpdatePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) AddPet(ctx context.Context, in *AddPetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/AddPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) FindPetsByStatus(ctx context.Context, in *FindPetsByStatusRequest, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/FindPetsByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) FindPetsByTags(ctx context.Context, in *FindPetsByTagsRequest, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/FindPetsByTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) GetPetById(ctx context.Context, in *GetPetByIdRequest, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/GetPetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) UpdatePetWithForm(ctx context.Context, in *UpdatePetWithFormRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/UpdatePetWithForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/DeletePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) GetOrderById(ctx context.Context, in *GetOrderByIdRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) GetInventory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInventoryOK, error) {
	out := new(GetInventoryOK)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/GetInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) CreateUsersWithArrayInput(ctx context.Context, in *CreateUsersWithArrayInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/CreateUsersWithArrayInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) CreateUsersWithListInput(ctx context.Context, in *CreateUsersWithListInputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/CreateUsersWithListInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) GetUserByName(ctx context.Context, in *GetUserByNameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/LoginUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) LogoutUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/LogoutUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petstoreClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/petstore.Petstore/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetstoreServer is the server API for Petstore service.
// All implementations must embed UnimplementedPetstoreServer
// for forward compatibility
type PetstoreServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*ApiResponse, error)
	UpdatePet(context.Context, *UpdatePetRequest) (*emptypb.Empty, error)
	AddPet(context.Context, *AddPetRequest) (*emptypb.Empty, error)
	FindPetsByStatus(context.Context, *FindPetsByStatusRequest) (*Pet, error)
	FindPetsByTags(context.Context, *FindPetsByTagsRequest) (*Pet, error)
	GetPetById(context.Context, *GetPetByIdRequest) (*Pet, error)
	UpdatePetWithForm(context.Context, *UpdatePetWithFormRequest) (*emptypb.Empty, error)
	DeletePet(context.Context, *DeletePetRequest) (*emptypb.Empty, error)
	PlaceOrder(context.Context, *PlaceOrderRequest) (*Order, error)
	GetOrderById(context.Context, *GetOrderByIdRequest) (*Order, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*emptypb.Empty, error)
	GetInventory(context.Context, *emptypb.Empty) (*GetInventoryOK, error)
	CreateUsersWithArrayInput(context.Context, *CreateUsersWithArrayInputRequest) (*emptypb.Empty, error)
	CreateUsersWithListInput(context.Context, *CreateUsersWithListInputRequest) (*emptypb.Empty, error)
	GetUserByName(context.Context, *GetUserByNameRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	LoginUser(context.Context, *LoginUserRequest) (*emptypb.Empty, error)
	LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPetstoreServer()
}

// UnimplementedPetstoreServer must be embedded to have forward compatible implementations.
type UnimplementedPetstoreServer struct {
}

func (UnimplementedPetstoreServer) UploadFile(context.Context, *UploadFileRequest) (*ApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedPetstoreServer) UpdatePet(context.Context, *UpdatePetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePet not implemented")
}
func (UnimplementedPetstoreServer) AddPet(context.Context, *AddPetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPet not implemented")
}
func (UnimplementedPetstoreServer) FindPetsByStatus(context.Context, *FindPetsByStatusRequest) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPetsByStatus not implemented")
}
func (UnimplementedPetstoreServer) FindPetsByTags(context.Context, *FindPetsByTagsRequest) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPetsByTags not implemented")
}
func (UnimplementedPetstoreServer) GetPetById(context.Context, *GetPetByIdRequest) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetById not implemented")
}
func (UnimplementedPetstoreServer) UpdatePetWithForm(context.Context, *UpdatePetWithFormRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePetWithForm not implemented")
}
func (UnimplementedPetstoreServer) DeletePet(context.Context, *DeletePetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}
func (UnimplementedPetstoreServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedPetstoreServer) GetOrderById(context.Context, *GetOrderByIdRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedPetstoreServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedPetstoreServer) GetInventory(context.Context, *emptypb.Empty) (*GetInventoryOK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedPetstoreServer) CreateUsersWithArrayInput(context.Context, *CreateUsersWithArrayInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersWithArrayInput not implemented")
}
func (UnimplementedPetstoreServer) CreateUsersWithListInput(context.Context, *CreateUsersWithListInputRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUsersWithListInput not implemented")
}
func (UnimplementedPetstoreServer) GetUserByName(context.Context, *GetUserByNameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedPetstoreServer) UpdateUser(context.Context, *UpdateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedPetstoreServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedPetstoreServer) LoginUser(context.Context, *LoginUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedPetstoreServer) LogoutUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUser not implemented")
}
func (UnimplementedPetstoreServer) CreateUser(context.Context, *CreateUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedPetstoreServer) mustEmbedUnimplementedPetstoreServer() {}

// UnsafePetstoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetstoreServer will
// result in compilation errors.
type UnsafePetstoreServer interface {
	mustEmbedUnimplementedPetstoreServer()
}

func RegisterPetstoreServer(s grpc.ServiceRegistrar, srv PetstoreServer) {
	s.RegisterService(&Petstore_ServiceDesc, srv)
}

func _Petstore_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_UpdatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).UpdatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/UpdatePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).UpdatePet(ctx, req.(*UpdatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_AddPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).AddPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/AddPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).AddPet(ctx, req.(*AddPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_FindPetsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPetsByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).FindPetsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/FindPetsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).FindPetsByStatus(ctx, req.(*FindPetsByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_FindPetsByTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPetsByTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).FindPetsByTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/FindPetsByTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).FindPetsByTags(ctx, req.(*FindPetsByTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_GetPetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).GetPetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/GetPetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).GetPetById(ctx, req.(*GetPetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_UpdatePetWithForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetWithFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).UpdatePetWithForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/UpdatePetWithForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).UpdatePetWithForm(ctx, req.(*UpdatePetWithFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/DeletePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).DeletePet(ctx, req.(*DeletePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).GetOrderById(ctx, req.(*GetOrderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/GetInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).GetInventory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_CreateUsersWithArrayInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersWithArrayInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).CreateUsersWithArrayInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/CreateUsersWithArrayInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).CreateUsersWithArrayInput(ctx, req.(*CreateUsersWithArrayInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_CreateUsersWithListInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersWithListInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).CreateUsersWithListInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/CreateUsersWithListInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).CreateUsersWithListInput(ctx, req.(*CreateUsersWithListInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).GetUserByName(ctx, req.(*GetUserByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/LoginUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_LogoutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).LogoutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/LogoutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).LogoutUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Petstore_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetstoreServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/petstore.Petstore/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetstoreServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Petstore_ServiceDesc is the grpc.ServiceDesc for Petstore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Petstore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "petstore.Petstore",
	HandlerType: (*PetstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _Petstore_UploadFile_Handler,
		},
		{
			MethodName: "UpdatePet",
			Handler:    _Petstore_UpdatePet_Handler,
		},
		{
			MethodName: "AddPet",
			Handler:    _Petstore_AddPet_Handler,
		},
		{
			MethodName: "FindPetsByStatus",
			Handler:    _Petstore_FindPetsByStatus_Handler,
		},
		{
			MethodName: "FindPetsByTags",
			Handler:    _Petstore_FindPetsByTags_Handler,
		},
		{
			MethodName: "GetPetById",
			Handler:    _Petstore_GetPetById_Handler,
		},
		{
			MethodName: "UpdatePetWithForm",
			Handler:    _Petstore_UpdatePetWithForm_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _Petstore_DeletePet_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _Petstore_PlaceOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _Petstore_GetOrderById_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Petstore_DeleteOrder_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _Petstore_GetInventory_Handler,
		},
		{
			MethodName: "CreateUsersWithArrayInput",
			Handler:    _Petstore_CreateUsersWithArrayInput_Handler,
		},
		{
			MethodName: "CreateUsersWithListInput",
			Handler:    _Petstore_CreateUsersWithListInput_Handler,
		},
		{
			MethodName: "GetUserByName",
			Handler:    _Petstore_GetUserByName_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Petstore_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Petstore_DeleteUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Petstore_LoginUser_Handler,
		},
		{
			MethodName: "LogoutUser",
			Handler:    _Petstore_LogoutUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Petstore_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "petstore.proto",
}
